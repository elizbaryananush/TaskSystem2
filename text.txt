MyProject/
    /frontend
    /backend
        /dist
        /node_modules
        /src
            /auth
                /guards
                    /jwt.guard.ts
                /strategies
                    /local.strategy.ts
                /auth.controller.ts
                /auth.service.ts
                /auth.module.ts
            /schemas
                /User.schema.ts   
            /users
                /users.controller.ts
                /users.service.ts
                /users.module.ts
            /app.module.ts
            /main.ts
        /test
        /.env
        /and etc folders and files . dont matter





//jwt.guard.ts

import { AuthGuard } from "@nestjs/passport";

export class JwtGuard extends AuthGuard ('local'){}



//local.strategy.ts

import { PassportStrategy } from "@nestjs/passport";
import { Strategy } from "passport-local";
import { AuthService } from "../auth.service";
import { Injectable, UnauthorizedException } from "@nestjs/common";
import { ExtractJwt } from "passport-jwt";

@Injectable()
export class JwtStrategy extends PassportStrategy(Strategy) {
    constructor(private authService: AuthService) {
        super({
            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
            ignoreExpiration: false,
            secretOrKey: process.env.JWT_SECRET,
        });
    }

    async validate(payload: any) {

        const user = await this.authService.validateUser(payload.email, payload.password); // Assuming payload.email holds user identifier
        if (!user) {
            return 'i dont know what the fuck is going on'
        }
        return console.log('validate'); // The user object will be attached to the request object after validation
    }
}




//auth.controller.ts

import { Controller, Post, Request, UseGuards } from '@nestjs/common';
import { AuthService } from './auth.service';
import { JwtGuard } from './guards/jwt.guard';

@Controller('auth')
export class AuthController {
    constructor(
        private authService: AuthService
    ) { }

    @UseGuards(JwtGuard)

    @Post('login')
    async login(@Request() req) {

        return await this.authService.login(req.user)
    }
}




//auth.service.ts

import { Injectable } from '@nestjs/common';
import { UsersService } from 'src/users/users.service';
import * as bcrypt from 'bcrypt'
import { JwtService } from '@nestjs/jwt';

@Injectable()
export class AuthService {
    constructor(
        private readonly usersService: UsersService,
        private jwtService: JwtService,
    ) { }

    async validateUser(email: string, password: string): Promise<any> {
        const user = await this.usersService.findOne(email)

        if (user && (await bcrypt.compare(password, user.password))) {
            const { password, ...result } = user;
            return result;
        } else if (user) {
            return { code: 401, massage: 'Wrong password' }
        } else {
            return { code: 404, massage: 'User not found' }
        }
    }


    async login(user: any) {
        const payload = {
            email: user.email,
            sub: {
                id: user._id
            }
        }

        return {
            ...user,
            accessToken: this.jwtService.sign(payload)
        }
    }
}



//auth.module.ts

import { Module } from '@nestjs/common';
import { AuthController } from './auth.controller';
import { AuthService } from './auth.service';
import { JwtModule, JwtService } from '@nestjs/jwt';
import { JwtStrategy } from './strategies/local.strategy';
import { UsersModule } from 'src/users/users.module';
import { PassportModule } from '@nestjs/passport';

@Module({
  imports: [
    UsersModule,
    PassportModule,
    JwtModule.register({
      secret: `${process.env.JWT_SECRET}`,
      signOptions: { expiresIn: '60m' }
    })
  ],

  controllers: [AuthController],

  providers: [AuthService , JwtService, JwtStrategy],

  exports: [AuthService]
})
export class AuthModule { }




//users.controller.ts

import { Body, Controller, Post } from '@nestjs/common';
import { UsersService } from './users.service';

@Controller('users')
export class UsersController {
    constructor(
        private usersService: UsersService
    ) { }

    @Post('signup')
    async signUp(@Body() body: { name: string, email: string, password: string }) {
        return this.usersService.create(body.name, body.email, body.password)
    }
}





//users.service.ts

import { Injectable, ConflictException } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model, Error as MongooseError } from 'mongoose';
import { User } from 'src/schemas/User.schema';
import * as bcrypt from 'bcrypt';

@Injectable()
export class UsersService {
    constructor(@InjectModel(User.name) private userModel: Model<User>) { }

    async create(name: string, email: string, password: string): Promise<any> {
        const hashed_password = await bcrypt.hash(password, 10);
        try {
            const user = new this.userModel({ name, email, password: hashed_password })
            return await user.save();
        } catch (error) {
            let massage;
            if (error.code === 11000) {
                massage = { code: 500, massage: 'This email is already in use' };
            } else {
                massage = { code: 500, massage: 'Registration failed' }
            }
            return massage;
        }
    }


    async findOne(email: string): Promise<any> {
        return this.userModel.findOne({ email })
    }
}



//users.module.ts

import { Module } from '@nestjs/common';
import { UsersService } from './users.service';
import { UsersController } from './users.controller';
import { MongooseModule } from '@nestjs/mongoose';
import { User , UserSchema} from '../schemas/User.schema';

@Module({
  imports: [
    MongooseModule.forFeature([{
    name: User.name,
    schema: UserSchema
  }])],
  providers: [UsersService],
  controllers: [UsersController],
  exports:[UsersService]
})
export class UsersModule { }


//app.module.ts

import { Module } from '@nestjs/common';
import { AuthModule } from './auth/auth.module';
import { MongooseModule } from '@nestjs/mongoose';
import { ConfigModule } from '@nestjs/config';
import { UsersModule } from './users/users.module';

@Module({
  imports: [
    ConfigModule.forRoot({
      isGlobal: true,
    }),
    MongooseModule.forRoot(process.env.MONGO_URL),
    UsersModule,
    AuthModule,
  ],
  controllers: [],
  providers: [],
})

export class AppModule { }



//main.ts

import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { ConfigModule } from '@nestjs/config';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);

  ConfigModule.forRoot({
    isGlobal: true,
  }),

  app.enableCors({
    origin: true,
    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
    credentials: true,
  });
  await app.listen(4100);
}
bootstrap();


//.env

PORT=4100
MONGO_URL='mongodb+srv://admin:anush123@cluster0.1p9nbfa.mongodb.net/'
JWT_SECRET='Nobody is coming to save you . Get up'








<TbDiamond />
<TbEyeClosed />


/front
    /node_modules
    /public
    /src
        /assets
        /components
            /AddNewTask.jsx
            /SingleTask.jsx
        /Pages
            /Layout.jsx
            /Mainpage.jsx
        /providers
            /Raskprovider.jsx
        /App.jsx
        /index.jsx